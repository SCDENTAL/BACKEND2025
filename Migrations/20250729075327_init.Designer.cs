// <auto-generated />
using System;
using Agenda.Base;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Agenda.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250729075327_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Agenda.Entidades.Calendario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadHorarios")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("HoraFinTurnos")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicioTurnos")
                        .HasColumnType("time");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("IntervaloTurnos")
                        .HasColumnType("time");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Calendarios");
                });

            modelBuilder.Entity("Agenda.Entidades.DTOs.ObraSocial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ObrasSociales");
                });

            modelBuilder.Entity("Agenda.Entidades.Odontologo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdministradorId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdministradorId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Odontologos");
                });

            modelBuilder.Entity("Agenda.Entidades.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dni")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ObraSocialId")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ObraSocialId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Agenda.Entidades.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rol");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Odontologo"
                        });
                });

            modelBuilder.Entity("Agenda.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Turno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Asistio")
                        .HasColumnType("bit");

                    b.Property<bool>("Disponible")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("Horario")
                        .HasColumnType("TIME(0)");

                    b.Property<int>("IdCalendario")
                        .HasColumnType("int");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<bool>("MensajeConfirmacionEnviado")
                        .HasColumnType("bit");

                    b.Property<int?>("ObraSocialId")
                        .HasColumnType("int");

                    b.Property<int?>("OdontologoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCalendario");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("ObraSocialId");

                    b.HasIndex("OdontologoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Turnos");
                });

            modelBuilder.Entity("Agenda.Entidades.Calendario", b =>
                {
                    b.HasOne("Agenda.Entidades.Usuario", "Usuario")
                        .WithMany("Calendarios")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Agenda.Entidades.DTOs.ObraSocial", b =>
                {
                    b.HasOne("Agenda.Entidades.Usuario", "Usuario")
                        .WithMany("ObrasSociales")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Agenda.Entidades.Odontologo", b =>
                {
                    b.HasOne("Agenda.Entidades.Usuario", "Administrador")
                        .WithMany("Odontologos")
                        .HasForeignKey("AdministradorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Agenda.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Administrador");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Agenda.Entidades.Paciente", b =>
                {
                    b.HasOne("Agenda.Entidades.DTOs.ObraSocial", "ObraSocial")
                        .WithMany("Pacientes")
                        .HasForeignKey("ObraSocialId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Agenda.Entidades.Usuario", "Usuario")
                        .WithMany("Pacientes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ObraSocial");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Agenda.Entidades.Usuario", b =>
                {
                    b.HasOne("Agenda.Entidades.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Turno", b =>
                {
                    b.HasOne("Agenda.Entidades.Calendario", "Calendario")
                        .WithMany("Turnos")
                        .HasForeignKey("IdCalendario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agenda.Entidades.Paciente", "Paciente")
                        .WithMany("Turnos")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Agenda.Entidades.DTOs.ObraSocial", "ObraSocial")
                        .WithMany()
                        .HasForeignKey("ObraSocialId");

                    b.HasOne("Agenda.Entidades.Odontologo", "Odontologo")
                        .WithMany("Turnos")
                        .HasForeignKey("OdontologoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Agenda.Entidades.Usuario", "Usuario")
                        .WithMany("Turnos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Calendario");

                    b.Navigation("ObraSocial");

                    b.Navigation("Odontologo");

                    b.Navigation("Paciente");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Agenda.Entidades.Calendario", b =>
                {
                    b.Navigation("Turnos");
                });

            modelBuilder.Entity("Agenda.Entidades.DTOs.ObraSocial", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("Agenda.Entidades.Odontologo", b =>
                {
                    b.Navigation("Turnos");
                });

            modelBuilder.Entity("Agenda.Entidades.Paciente", b =>
                {
                    b.Navigation("Turnos");
                });

            modelBuilder.Entity("Agenda.Entidades.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Agenda.Entidades.Usuario", b =>
                {
                    b.Navigation("Calendarios");

                    b.Navigation("ObrasSociales");

                    b.Navigation("Odontologos");

                    b.Navigation("Pacientes");

                    b.Navigation("Turnos");
                });
#pragma warning restore 612, 618
        }
    }
}
